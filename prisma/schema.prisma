// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model animes {
  id             Int            @id
  title_fr       String
  title_en       String?
  title_original String?
  info_url_fr    String?
  info_url_en    String?
  type           String?
  deleted_at     DateTime?
  created_at     DateTime?
  updated_at     DateTime?
  video_anime    video_anime[]
  genrables      genrables[]    @relation("AnimeGenres")
  anime_genres   anime_genres[]
}

model artists {
  id          Int           @id
  name        String
  created_at  DateTime?
  updated_at  DateTime?
  artistables artistables[]
}

model videos {
  id          Int           @id
  user_id     Int?
  ytid        String
  title       String
  is_featured Boolean?
  type        String?
  number      Int?
  status      String?
  view_count  Int?
  deleted_at  DateTime?
  created_at  DateTime?
  updated_at  DateTime?
  video_anime video_anime[]
  artistables artistables[]
  genrables   genrables[]   @relation("VideoGenres")

  artistablesArtist_id       Int?
  artistablesArtistable_id   Int?
  artistablesArtistable_type String?
  video_genres               video_genres[]
}

model artistables {
  artist_id       Int
  artistable_id   Int
  artistable_type String
  artists         artists @relation(fields: [artist_id], references: [id])
  videos          videos? @relation(fields: [artistable_id], references: [id])

  @@id([artist_id, artistable_id, artistable_type])
}

model video_anime {
  video_id Int
  anime_id Int
  videos   videos @relation(fields: [video_id], references: [id])
  animes   animes @relation(fields: [anime_id], references: [id])

  @@id([video_id, anime_id])
}

model genres {
  id           Int            @id
  name         String
  type         String?
  created_at   DateTime?
  updated_at   DateTime?
  genrables    genrables[]
  anime_genres anime_genres[]
  video_genres video_genres[]
}

model genrables {
  genre_id      Int
  genrable_id   Int
  genrable_type String
  genres        genres  @relation(fields: [genre_id], references: [id])
  animes        animes? @relation("AnimeGenres", fields: [genrable_id], references: [id], map: "genrables_anime_id_fkey")
  videos        videos? @relation("VideoGenres", fields: [genrable_id], references: [id], map: "genrables_video_id_fkey")

  @@id([genre_id, genrable_id, genrable_type])
}

model anime_genres {
  genre_id Int
  anime_id Int
  genres   genres @relation(fields: [genre_id], references: [id])
  animes   animes @relation(fields: [anime_id], references: [id])

  @@id([genre_id, anime_id])
}

model video_genres {
  genre_id Int
  video_id Int
  genres   genres @relation(fields: [genre_id], references: [id])
  videos   videos @relation(fields: [video_id], references: [id])

  @@id([genre_id, video_id])
}
